\NeedsTeXFormat{LaTeX2e}

%
% Variational lambda calculus definitions.
%
\ProvidesPackage{vlc}

\RequirePackage{etoolbox}
\RequirePackage{lambda}
\RequirePackage{cc}

% make the dimension environment optional
\newtoggle{DimEnvT}
\toggletrue{DimEnvT}
\DeclareOption{nodim}{\togglefalse{DimEnvT}}

% make the sharing environment optional
\newtoggle{ShrEnvT}
\toggletrue{ShrEnvT}
\DeclareOption{noshare}{\togglefalse{ShrEnvT}}

\ProcessOptions


%
% Lambda Calculus
%

% constants
\newcommand{\cMeta}{\OB{c}}

% abstraction
\newcommand{\lam}[2]{\OB{\lambda#1.#2}}
\newcommand{\lamp}[2]{\lam{\prog{#1}}{\prog{#2}}}

% application
\newcommand{\app}[2]{\OB{#1~#2}}

% tuples
\newcommand{\tup}[2]{\lam{f}{\app{\app{f}{#1}}{#2}}}

% some values
\newcommand{\id}{\prog{id}}
\newcommand{\suc}{\prog{succ}}
\newcommand{\tru}{\prog{true}}
\newcommand{\fls}{\prog{false}}


%
% Variational Types and Selectors
%

% type constants
\newcommand{\tyc}{\OB{\tau}}
\newcommand{\Int}{\prog{Int}}
\newcommand{\Bool}{\prog{Bool}}
\newcommand{\Char}{\prog{Char}}

% function types
\newcommand{\fun}[2]{\OB{#1\to#2}}

% tuple types
\newcommand{\tupt}[2]{\fun{(\fun{\fun{#1}{#2}}{a})}{a}}

% qualification metavariable
\newcommand{\qm}{\OB{q}}

% qualified type variables
\newcommand{\qv}[2]{\OB{#1_{#2}}}

% selectors
\newcommand{\fst}[1]{\OB{#1}}
\newcommand{\snd}[1]{\OB{\tilde{#1}}}

% constructing qualifications
\newcommand{\qemp}{\OB{\epsilon}}
\newcommand{\qcons}[2]{\OB{#1#2}}
\newcommand{\qcf}[2]{\qcons{\fst{#1}}{#2}}
\newcommand{\qcs}[2]{\qcons{\snd{#1}}{#2}}

% shortcuts for qualified type variables up to choice-nesting level of two
\newcommand{\qf}[2]{\qv{#1}{\fst{#2}}}
\newcommand{\qs}[2]{\qv{#1}{\snd{#2}}}
\newcommand{\qfq}[3]{\qv{#1}{\qcf{#2}{#3}}}
\newcommand{\qsq}[3]{\qv{#1}{\qcs{#2}{#3}}}
\newcommand{\qff}[3]{\qfq{#1}{#2}{\fst{#3}}}
\newcommand{\qfs}[3]{\qfq{#1}{#2}{\snd{#3}}}
\newcommand{\qsf}[3]{\qsq{#1}{#2}{\fst{#3}}}
\newcommand{\qss}[3]{\qsq{#1}{#2}{\snd{#3}}}

% generic qualified variables
\newcommand{\gqv}{\qv{a}{\qm}}
\newcommand{\gqvf}[2][\qm]{\qfq{a}{#2}{#1}}
\newcommand{\gqvs}[2][\qm]{\qsq{a}{#2}{#1}}

% tag list (decision)
\newcommand{\tagL}[1]{\OB{\overline{#1}}}

% mapping from expression-level decisions to type-level decisions
\newcommand{\tranF}[1]{\OB{\varphi_{#1}}}


%
% Environments
%

% environment names
\newcommand{\DimEnv}{\OB{\Delta}}
\newcommand{\TypeEnv}{\OB{\Gamma}}
\newcommand{\ShrEnv}{\OB{\Lambda}}
\newcommand{\optDimEnv}{\iftoggle{DimEnvT}{\OB{\DimEnv,}}{}}
\newcommand{\optShrEnv}{\iftoggle{ShrEnvT}{\OB{\ShrEnv,}}{}}
\newcommand{\AllEnvs}{\optDimEnv\optShrEnv\TypeEnv}

% constructing environments
\newcommand{\envEmpty}{\OB{\varnothing}}
\newcommand{\extEnv}[2]{\OB{#1\oplus#2}}
% extend \DimEnv with a pair (old name, new name)
\newcommand{\extDimEnv}[2]{\OB{\extEnv{\DimEnv}{(#1,#2)},\optShrEnv\TypeEnv}}
% extend \DimEnv only with a dimension name
\newcommand{\extDimEnvS}[1]{\OB{\extEnv{\DimEnv}{#1},\optShrEnv\TypeEnv}}
\newcommand{\extShrEnv}[2]{\OB{\optDimEnv\extEnv{\ShrEnv}{(#1,#2)},\TypeEnv}}
\newcommand{\extTypeEnv}[2]{\OB{\optDimEnv\optShrEnv\extEnv{\TypeEnv}{(#1,#2)}}}

% environment lookup
\newcommand{\lookEnv}[3][\TypeEnv]{\OB{#1(#2)=#3}}
\newcommand{\lookDim}[2]{\lookEnv[\DimEnv]{#1}{#2}}
\newcommand{\lookShr}[2]{\lookEnv[\ShrEnv]{#1}{#2}}


%
% Type Checking
%

% judgments
\newcommand{\ofType}[2]{\OB{#1:#2}}
\newcommand{\hasType}[3][\AllEnvs]{\OB{#1\vdash\ofType{#2}{#3}}}

% type equivalence
\newcommand{\tyeqSym}{\OB{\equiv}}
\newcommand{\tyeq}[2]{\OB{#1\tyeqSym#2}}

% type simplification
\newcommand{\simpSym}{\OB{\leadsto}}
\newcommand{\simplify}[2]{\OB{#1\simpSym#2}}
\newcommand{\nameOrder}{\OB{\preceq}}
\newcommand{\norm}[1]{\OB{\mathit{norm}(#1)}}


%
% Unification
%

% substitutions/unifiers
\newcommand{\eset}{\varnothing}
\newcommand{\map}[2]{\OB{#1 \mapsto #2}}

% unifer composition
\newcommand{\comSym}{\OB{\circ}}
\newcommand{\com}[2]{\OB{#1\comSym#2}} 

% substitution: #1=unifier, #2=type
\newcommand{\subs}[2]{\OB{#2#1}}

% unification function
\newcommand{\unifySym}{\mathit{unify}}
\newcommand{\unify}[3][{}]{\OB{\unifySym^{#1}(#2,#3)}}

% unification problems
\newcommand{\vuiSym}{\OB{\equiv^?}}
\newcommand{\vui}[2]{\OB{#1\vuiSym #2}}

\newcommand{\quiSym}{\OB{\equiv_q^?}}
\newcommand{\qui}[2]{\OB{#1\quiSym #2}}


% names for unification problems
\newcommand{\upp}{\ensuremath{U}}
\newcommand{\qup}{\ensuremath{Q}}
\newcommand{\supp}{\ensuremath{\sigma_\upp}}
\newcommand{\squp}{\ensuremath{\sigma_\qup}}

% unification helper functions
\newcommand{\Robinson}{\mathit{robinson}}
\newcommand{\chcs}{\mathit{choices}}
\newcommand{\hoist}{\mathit{hoist}}
\newcommand{\occurs}{\mathit{occurs}}
\newcommand{\clift}{\mathit{split}}
\newcommand{\free}{\mathit{splittable}}

% unification process
\newcommand{\lblsize}{\tiny}
\newcommand{\mrkty}[1]{\OB{\underline{#1}}}
\newcommand{\ustep}{\multicolumn{2}{c}{}\\ }
\newcommand{\uconcl}{\hline\multicolumn{3}{c}{} \\[-1ex]}
\newcommand{\lstep}[2][{}]{\OB{\raisebox{1pt}{{\lblsize #2}}\mathord{\downarrow}}
             \hphantom{~~#1}\\ }
\newcommand{\rstep}[2][{}]{&&\hphantom{#1}
             \OB{\mathord\downarrow\raisebox{1pt}{{\lblsize #2}}}\\ }
\newcommand{\ret}{\textrm{return}\ }

% completion
\newcommand{\compl}{\mathit{comp}}
\newcommand{\fresh}{\mathit{fresh}}


%
% Type Inference
%

% algorithm names
\newcommand{\inferr}{\mathit{infer}}
\newcommand{\algW}{\OB{\mathcal{W}}}


%
% Rule Names
%

% type equivalence rules
\newcommand{\FF}{\rn{Fun}}
\newcommand{\FC}{\rn{F-C}}
\newcommand{\CCSwap}{\rn{C-C-Swap}}
\newcommand{\CCSwapL}{\rn{C-C-Swap1}}
\newcommand{\CCSwapR}{\rn{C-C-Swap2}}
\newcommand{\CCMerge}{\rn{C-C-Merge}}
\newcommand{\CCMergeL}{\rn{C-C-Merge1}}
\newcommand{\CCMergeR}{\rn{C-C-Merge2}}
\newcommand{\CAlt}{\rn{Choice}}
\newcommand{\CIdemp}{\rn{C-Idemp}}
\newcommand{\Refl}{\rn{Refl}}
\newcommand{\Symm}{\rn{Symm}}
\newcommand{\Trans}{\rn{Trans}}

% type simplification rules
\newcommand{\SFArg}{\rn{S-F-Arg}}
\newcommand{\SFRes}{\rn{S-F-Res}}
\newcommand{\SFC}{\rn{S-F-C}}
\newcommand{\SFCArg}{\rn{S-F-C-Arg}}
\newcommand{\SFCRes}{\rn{S-F-C-Res}}
\newcommand{\SCSwap}{\rn{S-C-Swap}}
\newcommand{\SCSwapL}{\rn{S-C-Swap1}}
\newcommand{\SCSwapR}{\rn{S-C-Swap2}}
\newcommand{\SCDom}{\rn{S-C-Dom}}
\newcommand{\SCDomL}{\rn{S-C-Dom1}}
\newcommand{\SCDomR}{\rn{S-C-Dom2}}
\newcommand{\SCAlt}{\rn{S-C-Alt}}
\newcommand{\SCAltL}{\rn{S-C-Alt1}}
\newcommand{\SCAltR}{\rn{S-C-Alt2}}
\newcommand{\SCIdemp}{\rn{S-C-Idemp}}


%
% Extensions
%

% new keywords
\newcommand{\INL}{\CCkeyw{inl}}
\newcommand{\INR}{\CCkeyw{inr}}
\newcommand{\CASE}{\CCkeyw{case}}
\newcommand{\OF}{\CCkeyw{of}}

% new constructs
\newcommand{\inl}[1]{\OB{\INL\ #1}}
\newcommand{\inr}[1]{\OB{\INR\ #1}}
\newcommand{\caset}[5]{\OB{\CASE\ #1\ \OF\ \inl{#2} \Rightarrow #3\ |\ \inr{#4} \Rightarrow #5}}

% sum types
\newcommand{\sumSym}{\OB{+}}
\newcommand{\sumt}[2]{\OB{#1 \sumSym #2}}

% new rule names
\newcommand{\EQSUM}{\rn{Sum}}
\newcommand{\EQSC}{\rn{S-C}}
\newcommand{\SSUML}{\rn{S-S-L}}
\newcommand{\SSUMR}{\rn{S-S-R}}
\newcommand{\SSC}{\rn{S-S-C}}
